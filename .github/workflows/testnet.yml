name: Helix Testnet Deployments

on:
  push:
    branches:
      - testnet
      - master

jobs:
  testnet:
    if: true
    name: 'Deploy to testnet'
    runs-on: ubuntu-latest
    env:
      SSH_USER: ${{ secrets.TESTNET_SSH_USER }}
      SSH_KEY: ${{ secrets.TESTNET_SSH_KEY }}
      SSH_HOST: ${{ secrets.TESTNET_SSH_HOST }}
      SOURCE_DIR: ${{ secrets.TESTNET_SOURCE_PATH}}
      GIT_BRANCH: ${{secrets.TESTNET_GIT_BRANCH}}

      ## Public
      VITE_NAME: 'TESTNET - Helix | The Premier Decentralized Spot and Derivatives Exchange'
      VITE_BASE_URL: https://testnet.helixapp.com
      VITE_NETWORK: testnet
      VITE_ENV: testnet
      VITE_CHAIN_ID: injective-888

      ## Github Actions
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      ## Flags
      VITE_MAINTENANCE_ENABLED: false
      VITE_GEO_IP_RESTRICTIONS_ENABLED: false
      VITE_REFERRALS_ENABLED: false

      ## Endpoints
      VITE_INDEXER_API_ENDPOINT: ''
      VITE_CHRONOS_API_ENDPOINT: ''
      VITE_EXPLORER_API_ENDPOINT: ''
      VITE_SENTRY_GRPC_ENDPOINT: ''
      VITE_SENTRY_HTTP_ENDPOINT: ''

      ## Secret
      VITE_COINGECKO_API_KEY: ${{ secrets.VITE_COINGECKO_API_KEY }}
      VITE_NEWSLETTER_API: ${{ secrets.VITE_NEWSLETTER_API }}
      VITE_FEE_RECIPIENT: ${{ secrets.VITE_FEE_RECIPIENT }}
      VITE_ALCHEMY_GOERLI_KEY: ${{ secrets.VITE_ALCHEMY_GOERLI_KEY }}
      VITE_NINJA_PASS_ENDPOINT: ${{ secrets.VITE_NINJA_PASS_ENDPOINT }}

    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/testnet.key
          chmod 600 ~/.ssh/testnet.key
          cat >>~/.ssh/config <<END
          Host testnet
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/testnet.key
            StrictHostKeyChecking no
            SendEnv $SOURCE_DIR
          END

      - name: Check out the source
        run: ssh testnet 'cd "'$SOURCE_DIR'" && git fetch && git reset --hard "'$GIT_BRANCH'" && git pull'

      - name: Install Dependencies
        run: ssh testnet 'source $HOME/.nvm/nvm.sh && cd "'$SOURCE_DIR'" && yarn install'

      - name: Remove prev build
        run: ssh testnet 'cd "'$SOURCE_DIR'" && yarn clean-up'

      - name: Generating the static pages
        run: ssh testnet 'source $HOME/.nvm/nvm.sh && cd "'$SOURCE_DIR'" && yarn generate'

      - name: Proper permissions for dist folder
        run: ssh testnet 'sudo chown -R root:ubuntu $HOME/inj/injective-helix/.output/public/'
